#!/usr/bin/env bash
cliname="code-extensions"


# TODO:
# EXIT STATUSES SHOULD BE BETTER HANDLED

# Colors
FAT='\033[0;1;37m'
RED='\033[0;1;31m'
REDTHIN='\033[0;31m'
GREEN='\033[0;1;32m'
GREENTHIN='\033[0;32m'
YELLOW='\033[0;1;33m'
YELLOWTHIN='\033[0;33m'
BLUE='\033[0;1;34m'
BLUETHIN='\033[0;34m'
NC='\033[0m'

# Modes
interactive=0
install=0
backup=0
# Defaults
filename=$DEFAULT_CODE_EXTENSION_FILEPATH

usage() {
  printf "$cliname [--help] [--interactive] <command> [<args>]

A small script to help backup and install extensions for Visual Studio Code

 Usage:
    $cliname  --interactive
    $cliname  install [--filename <file>]
    $cliname  backup  [--filename <file>]

 Options:
  -f <file>, --filename <file>  Filename to backup or install from. ${FAT}[default: ${filename}]${NC}.
  -i, --interactive             Interactive mode.
  -h, --help                    Display this help and exit.
"
}


_backup(){
    overwriteCheck
    code --list-extensions > $filename
    printf "${GREEN}Extensions saved to${BLUE} $filename ${NC}\n"
}

_install(){
    if [ ! -f $filename ]; then
        printf "${RED}Error:\t'$filename' File does not exist, or is not a regular file.\n"
        exit 1
    fi 
    printf "${GREENTHIN}Installing extensions from file: ${YELLOW}$filename${NC}\n\n"
    oldifs="$IFS"
    IFS=$'\n'
    output=()
    for i in `cat $filename`; do
        printf "\033[1A\r\033[0K${GREEN}[INSTALLING]:${BLUETHIN} $i ${NC}\n"
        output+=(`code --install-extension $i 2>&1 | grep Extension`)
    done
    IFS="$oldifs"
    printf "\033[1A\r\033[0K"
    alr=0
    newversion=0
    err=0
    for each in "${output[@]}"; do
        # Count already installed
        if [[ $each =~ already ]]; then
            (( alr++ ))
            if [[ $each =~ newer ]]; then
                ((newversion++))
            fi
        # Count errors
        elif [[ $each =~ Failed ]]; then
        (( err++ ))
        fi
    done 
    # Installed - already - errors
    new=$((${#output[@]}-$alr-$err))
    # Result print
    printf "${BLUE}Installation of ${#output[@]} extensions completed with:${NC}\n"
    printf "${GREENTHIN}✓ $new installations${NC}\n"
    printf "${YELLOWTHIN}• $alr extensions already installed"
    if [ $newversion != 0 ]; then
        printf "${YELLOWTHIN}, $newversion have available updates${NC}\n"
    else
        printf "${NC}\n"
    fi
    printf "${REDTHIN}✖ $err errored\n"
}

backuporinstall(){
    printf "${GREEN}Would you like to backup or install? ${YELLOW}(b/i)${NC}\n"
    read response
    if [[ ("$response" = "b") || ("$response" = "B")]]; then
        backup=1
    elif [[ ("$response" = "i") || ("$response" = "I")]]; then
        install=1
    else
        printf "${RED}Not a viable option.\n${NC}"
        backuporinstall
    fi
}
overwriteCheck(){
    response=
    if [ -f $filename ]; then
        printf "${RED}Output file exists ${BLUE}[$filename]. ${RED}Overwrite? ${YELLOW}(y/n)${NC}\n"
        read response
        if [[ ("$response" != "y") && ("$response" != "Y") ]]; then
            printf "${RED}Exiting program.${NC}\n"
            exit 1
        fi
    fi
}
getfilename() {
    response=
    printf "${GREEN}Enter name of file ${YELLOW}[default: $filename]${NC}\n"
    read response
    if [ -n "$response" ]; then
        filename=$response
    fi
}

# Start

# Check if code is in path
code -v &> /dev/null;
if [ $? != 0 ]; then
    printf "${RED}ERROR. code (Visual Studio Code) is not in your path${NC}\n"
    exit 1
fi

# Check if any arguments at all
if [ "$1" = "" ]; then
    usage
    exit 1
fi

# Parse args/options
while [ "$1" != "" ]; do
    case $1 in
        install )               install=1
                                ;;
        backup )                backup=1
                                ;;
        -f | --filename )        shift
                                filename=$1
                                ;;
        -i | --interactive )    interactive=1
                                ;;
        -h | --help )           usage
                                exit
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done


if [ "$backup" = 1 -a "$install" = 1 ]; then
    printf "${RED}Cannot use both backup and install. Exiting. ${NC}"
    usage
    exit 1
fi


if [ $interactive = 1 ]; then
    printf "${GREEN}Welcome! Let's get started with managing extensions${NC}\n\n"
    backuporinstall
    getfilename
fi
if [ "$backup" = 1 ]; then
    _backup
fi
if [ "$install" = 1 ]; then
    _install
fi
